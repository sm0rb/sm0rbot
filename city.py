import json
import config
from sqlighter import SQLighter

def parse_city_json(json_file='russia.json'):
    p_obj = None
    try:
        js_obj = open(json_file, "r", encoding="utf-8")
        p_obj = json.load(js_obj)
    except Exception as err:
        print(err)
        return None
    finally:
        js_obj.close()   
    return [city['city'].lower() for city in p_obj]

def get_city(city):
    normilize_city = city.strip().lower()
    if is_correct_city_name(normilize_city):
        if normilize_city[-1] in ('—å', '—ä', '—ã'):
            normilize_city = normilize_city[:-1]

        if get_city.previous_city != "" and normilize_city[0] != get_city.previous_city[-1]:
            return '–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ "{0}"!ü§ì'.format(get_city.previous_city[-1])

        if normilize_city not in cities_already_named:
            cities_already_named.add(normilize_city)
            last_latter_city = normilize_city[-1]
            proposed_names = list(filter(lambda x: x[0] == last_latter_city, cities))
            if proposed_names:
                for city in proposed_names:
                    if city not in cities_already_named:
                        cities_already_named.add(city)
                        if city[-1] in ('—å', '—ä'):
                            get_city.previous_city = city[:-1]
                        else:
                            get_city.previous_city = city
                        return city.capitalize()
            return winer()
        else:
            return '–ì–æ—Ä–æ–¥ —É–∂–µ –±—ã–ªüòù\n–î–∞–≤–∞–π –¥—Ä—É–≥–æ–πü§ì'
    else:
        return '–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—åüßê\n‚ùå–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞‚ùå\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑'

def winer():
    db.update_valuebool(call.message.chat.id, 'gameBool', False)
    config.winerBool = True
    return '–Ø –Ω–µ –∑–Ω–∞—é –≥–æ—Ä–æ–¥–∞ –Ω–∞ —ç—Ç—É –±—É–∫–≤—Éüò∞\nüéâ–¢—ã –≤—ã–∏–≥—Ä–∞–ªüéâ, –ø–æ–∑–¥—Ä–∞–≤–ª—è—éü•≥'

get_city.previous_city = "" 

def is_correct_city_name(city):
    return city[-1].isalpha()

def refresh():
    get_city.previous_city = ""
    cities_already_named.clear()
    
cities = parse_city_json() # –≥–æ—Ä–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞–µ—Ç –±–æ—Ç
cities_already_named = set()  # –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏